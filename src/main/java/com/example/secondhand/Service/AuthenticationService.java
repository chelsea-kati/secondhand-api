package com.example.secondhand.Service;

import com.example.secondhand.dto.AuthenticationRequest;
import com.example.secondhand.dto.AuthenticationResponse;
import com.example.secondhand.dto.RegisterRequest;
import com.example.secondhand.Entity.Utilisateur;
import com.example.secondhand.Enum.Role;
import com.example.secondhand.Repository.UtilisateurRepository;
import com.example.secondhand.Security.JwtService;
import lombok.RequiredArgsConstructor;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.stereotype.Service;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.core.userdetails.UsernameNotFoundException;

@Service
@RequiredArgsConstructor
public class AuthenticationService {

    private final UtilisateurRepository utilisateurRepository;
    private final PasswordEncoder passwordEncoder;
    private final JwtService jwtService;
    private final AuthenticationManager authenticationManager;

    // üîê Enregistrement d‚Äôun nouvel utilisateur
    public AuthenticationResponse register(RegisterRequest request) {
        Utilisateur utilisateur = new Utilisateur();
        utilisateur.setNom(request.getNom());
        utilisateur.setEmail(request.getEmail());
        utilisateur.setMotDePasse(passwordEncoder.encode(request.getPassword()));
        utilisateur.setTelephone(request.getTelephone());
        utilisateur.setAdresse(request.getAdresse());

        // ‚ö†Ô∏è Si aucun r√¥le n‚Äôest pr√©cis√© dans le register, on attribue UTILISATEUR par d√©faut
        utilisateur.setRole(request.getRole() != null ? request.getRole() : Role.UTILISATEUR);

        utilisateurRepository.save(utilisateur);

        // ‚úÖ On g√©n√®re un token avec les infos compl√®tes (email + r√¥le)
        String token = jwtService.generateToken(utilisateur);

        return new AuthenticationResponse(token);
    }

    // üîê Authentification d‚Äôun utilisateur existant
    public AuthenticationResponse authenticate(AuthenticationRequest request) {
        // V√©rifie que l‚Äôemail et le mot de passe sont valides
        authenticationManager.authenticate(
            new UsernamePasswordAuthenticationToken(
                request.getEmail(),
                request.getPassword()
            )
        );

        // R√©cup√®re l‚Äôutilisateur en base
        Utilisateur utilisateur = utilisateurRepository.findByEmail(request.getEmail())
            .orElseThrow(() -> new UsernameNotFoundException("Utilisateur non trouv√©"));

        // ‚úÖ On g√©n√®re un token avec les infos de l‚Äôutilisateur (email + r√¥le)
        String token = jwtService.generateToken(utilisateur);

        return new AuthenticationResponse(token);
    }
}
